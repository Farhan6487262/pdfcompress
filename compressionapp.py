# -*- coding: utf-8 -*-
"""compressionapp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/166hmfKbkx1MNuFOUvJWEzzj-Yg4oVAYm
"""

#final full code working now i want to restrict thqt no file to be uploaded to the google colab 24-044-2025 time: 12:21 am
!pip install pikepdf
# must to be installed and upload a file /content/large_file.pdf

# step 2:
# for more heavy compression for extreme compression have to install this library
!apt-get install -y ghostscript

# code working for two compression options on a file to be compressed

!pip install pymupdf
from IPython.display import display
import ipywidgets as widgets
from google.colab import files
import os
import subprocess
import time
import warnings

# Suppress warnings
warnings.filterwarnings("ignore")

# Install Ghostscript already installed
#!apt-get install -y ghostscript

# Compression Function --------------------------------------------------------

def compress_pdf_gs(input_pdf, output_pdf, quality='screen'):
    """Compress PDF using Ghostscript"""
    qualities = ['screen', 'ebook', 'printer', 'prepress']
    if quality not in qualities:
        raise ValueError(f"Invalid quality. Choose from: {qualities}")

    command = [
        "gs",
        "-sDEVICE=pdfwrite",
        "-dCompatibilityLevel=1.4",
        f"-dPDFSETTINGS=/{quality}",
        "-dNOPAUSE",
        "-dQUIET",
        "-dBATCH",
        f"-sOutputFile={output_pdf}",
        input_pdf
    ]

    try:
        subprocess.run(command, check=True, stderr=subprocess.PIPE)
    except subprocess.CalledProcessError as e:
        raise RuntimeError(f"Ghostscript failed: {e.stderr.decode()}")

def compress_pdf(input_pdf, compression_type="less"):
    """Main compression function using only Ghostscript"""
    output_file = f"/content/compressed_{compression_type}_{int(time.time())}.pdf"

    # Define Ghostscript quality setting
    quality = "ebook" if compression_type == "less" else "screen"

    compress_pdf_gs(input_pdf, output_file, quality)
    return output_file

# UI with ipywidgets ----------------------------------------------------------

upload = widgets.FileUpload(accept='.pdf', multiple=False, description="PDF File:")
compression_type = widgets.RadioButtons(
    options=['less', 'extreme'],
    value='less',
    description='Compression:',
    style={'description_width': 'initial'}
)
compress_btn = widgets.Button(description="Compress PDF", button_style='success')
output = widgets.Output()

box_layout = widgets.Layout(display='flex', flex_flow='column', align_items='stretch', width='70%')
header = widgets.HTML("<h2>PDF Compression Tool</h2>")

def on_compress_click(b):
    with output:
        output.clear_output()

        if not upload.value:
            print("‚ö†Ô∏è Please upload a PDF file first")
            return

        file_name = next(iter(upload.value))
        file_content = upload.value[file_name]['content']

        temp_path = f"/content/{file_name}"
        with open(temp_path, 'wb') as f:
            f.write(file_content)

        original_size = os.path.getsize(temp_path) / (1024 * 1024)  # in MB
        print(f"üìÑ Original file: {file_name} ({original_size:.2f} MB)")
        print(f"üîß Compression: {compression_type.value}")
        print("‚è≥ Processing...")

        try:
            start_time = time.time()
            compressed_path = compress_pdf(temp_path, compression_type.value)

            if compressed_path and os.path.exists(compressed_path):
                new_size = os.path.getsize(compressed_path) / (1024 * 1024)
                ratio = (1 - (new_size / original_size)) * 100
                time_taken = time.time() - start_time

                print(f"\n‚úÖ Compression successful!")
                print(f"üìä Results:")
                print(f"  Original: {original_size:.2f} MB")
                print(f"  Compressed: {new_size:.2f} MB")
                print(f"  Reduction: {ratio:.1f}%")
                print(f"  Time: {time_taken:.1f} seconds")

                print("\n‚¨áÔ∏è Downloading compressed file...")
                print("\n‚¨áÔ∏è File is Downloaded...")
                files.download(compressed_path)
            else:
                print("‚ùå Compression failed")

        except Exception as e:
            print(f"‚ùå Error: {str(e)}")
        finally:
            if os.path.exists(temp_path):
                os.remove(temp_path)

compress_btn.on_click(on_compress_click)

display(widgets.VBox([
    header,
    upload,
    compression_type,
    compress_btn,
    output
], layout=box_layout))